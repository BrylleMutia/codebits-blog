{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Brylle Mutia\\\\Downloads\\\\SAVED\\\\Python\\\\CODE PLAYGROUND\\\\WEB PROJECTS\\\\## WEBAPPS\\\\#16 CODEBITS (BLOG)\\\\client\\\\src\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { ReactPaginate } from \"react-paginate\";\nimport Router, { withRouter } from \"next/router\";\nimport { container, app } from \"./global/styles.module.css\";\nimport { getPosts } from \"../actions/postsActions\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nconst Home = props => {\n  const {\n    0: isLoading,\n    1: setLoading\n  } = useState(false);\n  const dispatch = useDispatch();\n  const postsDetails = useSelector(state => state.posts.posts);\n\n  const startLoading = () => setLoading(true);\n\n  const stopLoading = () => setLoading(false);\n  /*\r\n      posts fetching happens after page navigation,\r\n      so we need to switch loading state on router events.\r\n  */\n\n\n  useEffect(() => {\n    dispatch(getPosts(1));\n  }, []);\n  useEffect(() => {\n    // after the component is mounted, set router event handlers\n    Router.events.on(\"routeChangeStart\", startLoading);\n    Router.events.on(\"routeChangeComplete\", stopLoading);\n    return () => {\n      // componentWillUnmount\n      Router.events.off(\"routeChangeStart\", startLoading);\n      Router.events.off(\"routeChangeComplete\", stopLoading);\n    };\n  }, []); // when new page is selected in pagination, take current path and query params\n  // then add or modify query page param and then navigate to the new route\n\n  const paginationHandler = page => {\n    console.log(props.router);\n    const currentPath = props.router.pathname;\n    const currentQuery = props.router.query;\n    currentQuery.page = page.selected + 1;\n    props.router.push({\n      pathname: currentPath,\n      query: currentQuery\n    });\n  }; // conditional rendering of the posts list or the loading indicator\n\n\n  let content = null;\n\n  if (isLoading) {\n    content = __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 19\n      }\n    }, \"Loading...\");\n  } else {\n    // generate posts list\n    content = __jsx(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }\n    }, props.posts.posts.map(post => __jsx(\"li\", {\n      key: post._id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }\n    }, post.title)));\n  }\n\n  return __jsx(\"div\", {\n    className: container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }, \"Posts list with pagination in Next.js\"), __jsx(\"div\", {\n    className: \"posts\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, content), __jsx(ReactPaginate, {\n    previousLabel: \"previous\",\n    nextLabel: \"next\",\n    breakLabel: \"...\",\n    breakClassName: \"break-me\",\n    activeClassName: \"active\",\n    containerClassName: \"pagination\",\n    subContainerClassName: \"pages pagination\",\n    initialPage: postsDetails.currentPage - 1,\n    pageCount: postsDetails.totalPages,\n    marginPagesDisplayed: 2,\n    pageRangeDisplayed: 5,\n    onPageChange: paginationHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }));\n}; // fetching posts in getInitialProps to make the app SEO-friendly\n// Home.getInitialProps = ({ store, query }) => {\n//     const page = query.page || 1; // if page is empty request the first page\n//     store.dispatch(getPosts(1));\n//     const posts = store.getState().posts.posts.posts;\n//     return posts;\n// };\n\n\nexport default withRouter(Home);","map":{"version":3,"sources":["C:/Users/Brylle Mutia/Downloads/SAVED/Python/CODE PLAYGROUND/WEB PROJECTS/## WEBAPPS/#16 CODEBITS (BLOG)/client/src/pages/index.js"],"names":["React","useState","useEffect","axios","ReactPaginate","Router","withRouter","container","app","getPosts","useSelector","useDispatch","Home","props","isLoading","setLoading","dispatch","postsDetails","state","posts","startLoading","stopLoading","events","on","off","paginationHandler","page","console","log","router","currentPath","pathname","currentQuery","query","selected","push","content","map","post","_id","title","currentPage","totalPages"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { ReactPaginate } from \"react-paginate\";\r\nimport Router, { withRouter } from \"next/router\";\r\n\r\nimport { container, app } from \"./global/styles.module.css\";\r\n\r\nimport { getPosts } from \"../actions/postsActions\";\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nconst Home = (props) => {\r\n    const [isLoading, setLoading] = useState(false);\r\n\r\n    const dispatch = useDispatch();\r\n    const postsDetails = useSelector((state) => state.posts.posts);\r\n\r\n    const startLoading = () => setLoading(true);\r\n    const stopLoading = () => setLoading(false);\r\n\r\n    /*\r\n        posts fetching happens after page navigation,\r\n        so we need to switch loading state on router events.\r\n    */\r\n\r\n    useEffect(() => {\r\n        dispatch(getPosts(1));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        // after the component is mounted, set router event handlers\r\n        Router.events.on(\"routeChangeStart\", startLoading);\r\n        Router.events.on(\"routeChangeComplete\", stopLoading);\r\n\r\n        return () => {\r\n            // componentWillUnmount\r\n            Router.events.off(\"routeChangeStart\", startLoading);\r\n            Router.events.off(\"routeChangeComplete\", stopLoading);\r\n        };\r\n    }, []);\r\n\r\n    // when new page is selected in pagination, take current path and query params\r\n    // then add or modify query page param and then navigate to the new route\r\n    const paginationHandler = (page) => {\r\n        console.log(props.router);\r\n\r\n        const currentPath = props.router.pathname;\r\n        const currentQuery = props.router.query;\r\n\r\n        currentQuery.page = page.selected + 1;\r\n\r\n        props.router.push({\r\n            pathname: currentPath,\r\n            query: currentQuery,\r\n        });\r\n    };\r\n\r\n    // conditional rendering of the posts list or the loading indicator\r\n    let content = null;\r\n    if (isLoading) {\r\n        content = <div>Loading...</div>;\r\n    } else {\r\n        // generate posts list\r\n        content = (\r\n            <ul>\r\n                {props.posts.posts.map((post) => (\r\n                    <li key={post._id}>{post.title}</li>\r\n                ))}\r\n            </ul>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className={container}>\r\n            <h1>Posts list with pagination in Next.js</h1>\r\n            <div className=\"posts\">{content}</div>\r\n\r\n            <ReactPaginate\r\n                previousLabel={\"previous\"}\r\n                nextLabel={\"next\"}\r\n                breakLabel={\"...\"}\r\n                breakClassName={\"break-me\"}\r\n                activeClassName={\"active\"}\r\n                containerClassName={\"pagination\"}\r\n                subContainerClassName={\"pages pagination\"}\r\n                initialPage={postsDetails.currentPage - 1}\r\n                pageCount={postsDetails.totalPages}\r\n                marginPagesDisplayed={2}\r\n                pageRangeDisplayed={5}\r\n                onPageChange={paginationHandler}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\n// fetching posts in getInitialProps to make the app SEO-friendly\r\n// Home.getInitialProps = ({ store, query }) => {\r\n//     const page = query.page || 1; // if page is empty request the first page\r\n\r\n//     store.dispatch(getPosts(1));\r\n//     const posts = store.getState().posts.posts.posts;\r\n\r\n//     return posts;\r\n// };\r\n\r\nexport default withRouter(Home);\r\n"]},"metadata":{},"sourceType":"module"}