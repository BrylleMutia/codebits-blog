{"ast":null,"code":"import { createStore, applyMiddleware, compose } from \"redux\";\nimport rootReducer from \"../reducers/index\";\nimport thunk from \"redux-thunk\";\nimport { createWrapper } from \"next-redux-wrapper\";\nconst middleware = [thunk]; // const store = createStore(\n//     rootReducer,\n//     // applyMiddleware(...middleware)\n//     compose(applyMiddleware(...middleware), window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\n// );\n// export default store;\n\nconst makeStore = context => {\n  let composeEnhancers = compose; //Check if function running on the sever or client\n\n  if (!options.isServer) {\n    //Setup Redux Debuger\n    composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n  }\n\n  const store = createStore(rootReducer, initialState, composeEnhancers(applyMiddleware(thunk) //Applying redux-thunk middleware\n  ));\n  return store;\n};\n\ncreateStore(rootReducer, // applyMiddleware(...middleware)\ncompose(applyMiddleware(...middleware), window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()));\nexport const wrapper = createWrapper(makeStore, {\n  debug: true\n});","map":{"version":3,"sources":["C:/Users/Brylle Mutia/Downloads/SAVED/Python/CODE PLAYGROUND/WEB PROJECTS/## WEBAPPS/#16 CODEBITS (BLOG)/client/src/store/index.js"],"names":["createStore","applyMiddleware","compose","rootReducer","thunk","createWrapper","middleware","makeStore","context","composeEnhancers","options","isServer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","initialState","__REDUX_DEVTOOLS_EXTENSION__","wrapper","debug"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,aAAT,QAA8B,oBAA9B;AAEA,MAAMC,UAAU,GAAG,CAACF,KAAD,CAAnB,C,CAEA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMG,SAAS,GAAIC,OAAD,IAAa;AAC3B,MAAIC,gBAAgB,GAAGP,OAAvB,CAD2B,CAG3B;;AACA,MAAI,CAACQ,OAAO,CAACC,QAAb,EAAuB;AACnB;AACAF,IAAAA,gBAAgB,GAAGG,MAAM,CAACC,oCAAP,IAA+CX,OAAlE;AACH;;AAED,QAAMY,KAAK,GAAGd,WAAW,CACrBG,WADqB,EAErBY,YAFqB,EAGrBN,gBAAgB,CACZR,eAAe,CAACG,KAAD,CADH,CACW;AADX,GAHK,CAAzB;AAQA,SAAOU,KAAP;AACH,CAlBD;;AAmBAd,WAAW,CACPG,WADO,EAEP;AACAD,OAAO,CAACD,eAAe,CAAC,GAAGK,UAAJ,CAAhB,EAAiCM,MAAM,CAACI,4BAAP,IAAuCJ,MAAM,CAACI,4BAAP,EAAxE,CAHA,CAAX;AAMA,OAAO,MAAMC,OAAO,GAAGZ,aAAa,CAACE,SAAD,EAAY;AAAEW,EAAAA,KAAK,EAAE;AAAT,CAAZ,CAA7B","sourcesContent":["import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport rootReducer from \"../reducers/index\";\r\nimport thunk from \"redux-thunk\";\r\nimport { createWrapper } from \"next-redux-wrapper\";\r\n\r\nconst middleware = [thunk];\r\n\r\n// const store = createStore(\r\n//     rootReducer,\r\n//     // applyMiddleware(...middleware)\r\n//     compose(applyMiddleware(...middleware), window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\r\n// );\r\n\r\n// export default store;\r\n\r\nconst makeStore = (context) => {\r\n    let composeEnhancers = compose;\r\n\r\n    //Check if function running on the sever or client\r\n    if (!options.isServer) {\r\n        //Setup Redux Debuger\r\n        composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n    }\r\n\r\n    const store = createStore(\r\n        rootReducer,\r\n        initialState,\r\n        composeEnhancers(\r\n            applyMiddleware(thunk) //Applying redux-thunk middleware\r\n        )\r\n    );\r\n\r\n    return store;\r\n};\r\ncreateStore(\r\n    rootReducer,\r\n    // applyMiddleware(...middleware)\r\n    compose(applyMiddleware(...middleware), window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\r\n);\r\n\r\nexport const wrapper = createWrapper(makeStore, { debug: true });\r\n"]},"metadata":{},"sourceType":"module"}